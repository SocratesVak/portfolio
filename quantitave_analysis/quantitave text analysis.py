# -*- coding: utf-8 -*-
"""Ποσοτική_ανάλυση_Γλωσσικών_Δεδομένων___Εργασία_1___Βακιρτζιάν.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/110xMpkDosjY7dOVDPX-x-A8ZOFjxmF5u
"""

from google.colab import drive
drive.mount('/content/drive')
#συνδέομαι με το google drive
import os 
os.chdir('/content/drive/MyDrive/Ποσοτική ανάλυση')
!pwd #εντολή που μας τυπώνει σε ποιο φάκελο κοιτάει ο υπολογιστής

import re
#ανοίγω το κείμενο και ακολουθεί καθαρισμός του, ώστε να πάρουμε στεγνό κείμενο.
init_text = ""
with open('./Μπελογιάννης, ο άνθρωπος με το γαρύφαλλο - Οδυσσέας Γκιλής.pdf.v2.txt', encoding='utf8') as f:  
    init_text = f.read()
f.close()

text = re.sub(r'[^\w\s]', ' ', init_text) #replace punctuation
text  = re.sub(r"\s+", " ", text).strip() #removes or truncates the given characters from the beginning and the end of the original string. 
text = text.lower()

words = text.split(" ")  
print(len(words))

import numpy as np
# εδώ χωρίζουμε το καθαρισμένο κείμενο σε 32 αρχεία. Αυτός ο αριθμός βρέθηκε ως βέλτιστος για την δημιουργία ίσης κατά το δυνατόν έκτασης κειμένων

limit = 615
total_files = round(len(words)/limit)

if total_files*limit<len(words):
    total_files =  total_files + 1
print("number of files\t", total_files)
counter=-1
range1 = np.linspace(1, total_files, total_files)
range1
for i in range1:
    temp = words[counter+1:counter+1+limit]
    counter = counter+limit+1
    filename = "/content/drive/MyDrive/Μπελογιάννης, ο άνθρωπος με το γαρύφαλλο - Οδυσσέας Γκιλής"+str(i)+".txt"
    print(filename)
    output_file = open(filename,'w')
    for word in temp:
        output_file.write(word + " ")
    output_file.close()

# Create the file path with the file that you would like Python to read in.
file_path = "/content/drive/MyDrive/Ποσοτική ανάλυση, εργασία 1, Results.csv"

# Import the pandas library.
import pandas as pd

# Reading in the csv file to a pandas dataframe.
texts_results = pd.read_csv(file_path, sep='\t', decimal=",")

print("shape:\t", texts_results.shape)

texts_results.head()

# εδώ αφαιρούμε τη στήλη frequencies ως μη χρήσιμη.
texts_results.drop(['Frequencies' ], axis='columns', inplace=True)
print("new_version\t" , texts_results.shape)
texts_results.head()

# εδώ αφαιρούμε την πρώτη και τελευταία στήλη ως μη χρήσιμες.

keys = texts_results.keys() 
texts_results.drop([keys[0], keys[-1]], axis='columns', inplace=True)
print(texts_results.shape)
texts_results.head()

import matplotlib.pyplot as plt
# εδώ πλοτάρουμε με δύο παραπλήσιους τρόπους τα αποτελέσματα που εβγαλε το QUITA για κάθε ποσοτικό δείκτη σε σχέση με τα 32 κείμενα.
features =['Tokens','TTR','h-Point','Entropy','Average Tokens Length','R1','Λ (Lambda)']
for feature in features:
  plt.plot(texts_results[feature], '--');
  plt.xlabel('sequence number')
  plt.ylabel(feature)
  plt.show()
  
  plt.plot(texts_results[feature], 'ro');
  plt.xlabel('sequence number')
  plt.ylabel(feature)
  plt.show()

#επικρατούσα τιμή στο h-point
print(texts_results['h-Point'].mode())
print('-----')
# η επικρατούσα τιμή εμφανίζεται 8 φορές σε δείγμα 32 κειμένων.
print(texts_results["h-Point"].value_counts())

import numpy as np
import seaborn as sns
from scipy.stats import kurtosis, skew

# δημιουργώ μια νέα μεταβλητή 'texts_results1' για το dataframe, η οποία θα υποστεί την αφαίρεση των outliers, διατηρώντας αναλλοίωτη την παλιά texts_results. 
# Ο λόγος είναι ότι, αφαιρώντας ένα datapoint ως outlier στον εκάστοτε ποσοτικό δείκτη, αφαιρείται ολόκληρο το datapoint. Ωστόσο, σε άλλους δείκτες το εν λόγω 
# datapoint δεν είναι κατ' ανάγκη outlier. Έτσι, με αυτόν τον τρόπο εξασφαλίζουμε ότι κάθε δείκτης έχει στη διάθεση της όλο το dataframe.

texts_results1=texts_results
quint_index ='TTR'
#print(sorted(texts_results1[quint_index ]))
print('\t\t',quint_index ,'\n','-------------------------------------')
#βρίσκω τα quartiles, υπολογίζω iqr και μέσω αυτών τις άκρες των whiskers
q75, q25 = np.percentile(texts_results1[quint_index], [75 ,25]) 
print("q25 =", q25)
print("q75 =", q75)
iqr = q75 - q25
print("iqr =", iqr)

minimum = q25-1.5*iqr
print("'minimum'\t",minimum)
maximum = q25+1.5*iqr
print("'maximum'\t",maximum)


# Το boxplot απεικονίζει την κατάσταση πριν την αφαίρεση των outliers
# Αυτό που παρατήρησα είναι ότι το boxplot βάζει ως ανώτατο whisker όχι το σημείο που αντιστοιχεί με τον ακριβό υπολογισμό του τύπου (q25+1.5*iqr), αλλά
# σε μια πραγματική τιμή του dataset, που προσεγγίζει αυτό το ακριβές σημείο.
# Ωστόσο, σε ποσοτικούς δείκτες, όπως ο Εntropy, εμφανίστηκαν προβλήματα. Δείτε παρακάτω στο αντίστοιχο μπλοκ του κώδικο για τον Entropy
plt.boxplot(texts_results1[quint_index])
plt.show()

#βρίσκω τους outliers και τους βάζω σε μια λίστα
outliers=[]
for i in texts_results1[quint_index]:
  if i<minimum or i>maximum:
   outliers.append(i)
   

#διώχνω τους outliers / κρατάω στο δείγμα μου ό,τι δεν είναι outlier
texts_results1=texts_results1.loc[texts_results1[quint_index]<maximum]
texts_results1=texts_results1.loc[texts_results1[quint_index]>minimum]

print("outliers in", quint_index,":", outliers)

print("mean:\t", texts_results1[quint_index].mean())

print("median:\t", texts_results1[quint_index].median())

print("std:\t", texts_results1[quint_index].std())

#ιστόγραμμα
hist=texts_results1[quint_index].hist(bins=10)
plt.show()

#ιστόγραμμα μαζί με probability density function. Προβαίνουμε σε πολλαπλασιασμό του μεγέθους του ιστογράμματος για λόγους βελτιωμένης οπτικής αναπαράστασης.
feature = texts_results1[quint_index]
res = feature.describe()
hist_1 = 50*feature/res.get('count') 

hist_2 = hist_1.hist(bins=10)
sns.kdeplot(hist_1)
plt.show()

#υπολογισμός του skewness
skewness = skew(hist_1)
print("\nskewness:\t", skewness)

if skewness < 0:
  print("****left-skewed distribution (negatively skewed)****\n" )
elif skewness > 0:
  print("****right-skewed distribution (positively skewed)****\n" )

if skewness<0.5 and skewness>-0.5:
  print("****the data are fairly symmetrical****")
elif -1<skewness<-0.5 or 1>skewness>0.5:
  print("****the data are moderately skewed****")
else:
  print('***the data are highly skewed***')

"""Τα βασικά εργαλεία, που διαθέτουμε προς το παρόν, για να εξετάσουμε αν μια κατανομή είναι κανονική ή έστω προσεγγίζει την κανονική κατανομή είναι το σχήμα της, που θα πρέπει να είναι κατα το δυνατόν κωνοειδής και η συμμετρία μεταξύ του αριστερού και δεξιού τμήματος από τη μέση τιμή. Για να προσεγγίζει την κανονική κατανομή θα πρέπει να είναι όσο το δυνατόν πιο συμμετρική.


Η Probability Density Function(PDF) για τον δείκτη TTR παρουσιάζει μια εικόνα σημαντικά διαφορετική από την κανονική κατανομή. Όσον αφορά το skewness, η κατανομή διαθέτει μια ουρά προς τα αριστερά. Ωστόσο, σύμφωνα με την μέτρηση του κώδικα η κατανομή δεν παρουσιάζει έντονη ασυμμετρία.
"""

texts_results1=texts_results
quint_index='h-Point'
#print(sorted(texts_results1[quint_index]))
print('\t\t',quint_index,'\n','-------------------------------------')
q75, q25 = np.percentile(texts_results1[quint_index], [75 ,25]) 
print("q25 =", q25)
print("q75 =", q75)
iqr = q75 - q25
print("iqr =", iqr)

minimum = q25-1.5*iqr
print("'minimum'\t",minimum)
maximum = q25+1.5*iqr
print("'maximum'\t",maximum)


plt.boxplot(texts_results1[quint_index])
plt.show()


outliers=[]
for i in texts_results1[quint_index]:
  if i<minimum or i>maximum:
   outliers.append(i)


texts_results1=texts_results1.loc[texts_results1[quint_index]<maximum]
texts_results1=texts_results1.loc[texts_results1[quint_index]>minimum]

print("outliers in", quint_index,":", outliers)

print("mean:\t", texts_results1[quint_index].mean())

print("median:\t", texts_results1[quint_index].median())

print("std:\t", texts_results1[quint_index].std())


hist=texts_results1[quint_index].hist(bins=8)
plt.show()

feature = texts_results1[quint_index]
res = feature.describe()
hist_1 = 2*feature/res.get('count') 

hist_2 = hist_1.hist(bins=8)
sns.kdeplot(hist_1)
plt.show()


skewness = skew(hist_1)
print("\nskewness:\t", skewness)

if skewness < 0:
  print("****left-skewed distribution (negatively skewed)****\n" )
elif skewness > 0:
  print("****right-skewed distribution (positively skewed)****\n" )

if skewness<0.5 and skewness>-0.5:
  print("****the data are fairly symmetrical****")
elif -1<skewness<-0.5 or 1>skewness>0.5:
  print("****the data are moderately skewed****")
else:
  print('***the data are highly skewed***')

"""Η PDF για τον δείκτη h-Point δείχνει μια κατανομή με ελάχιστη ασυμμετρία. Θα λέγαμε ότι διαφέρει από την κανονική κατανομή  καθώς παρατηρείται μια ουρά προς τα αριστερά, χαρακτηριστικό διαφοροποιητικό από την κανονική κατανομή."""

texts_results1=texts_results
quint_index='Entropy'
#print(sorted(texts_results1[quint_index]))
print('\t\t',quint_index,'\n','-------------------------------------')
q75, q25 = np.percentile(texts_results1[quint_index], [75 ,25]) 
print("q25 =", q25)
print("q75 =", q75)
iqr = q75 - q25
print("iqr =", iqr)

minimum = q25-1.5*iqr
print("'minimum'\t",minimum)
maximum = q25+1.5*iqr
print("'maximum'\t",maximum)

print(sorted(texts_results1[quint_index]))

# Εδώ ο υπολογισμός της maximum αποδεκτής τιμής μας δίνει την εξής τιμή 'maximum'= 7.8269512500000005. Αναμένουμε ό,τι είναι μεγαλύτερο 
# του maximum να χαρακτηριστεί ως outlier, το οποίο επιβεβαιώνεται από το κομμάτι κώδικα που έχω δημιουργήσει για την ανεύρεση των outliers. 
# Ωστόσο, το boxplot βάζει ως ανώτατο whisker το 7.953916, αν και μεσολαβούν προηγούμενως 3 τιμές(7.844413, 7.861346, 7.872984) που είναι μεγαλύτερες 
# του maximum που αναφέρθηκε. Με τη λογική ότι το boxplot βάζει το ανώτατο και αντίστοιχα το κατώτατο όριο σε μια πραγματική τιμή θα περιμέναμε εν προκειμένω
# να θέσει το όριο αποδεκτότητας στο 7.844413 και να χαρακτηρίσει ως outliers τα υπόλοιπα 3 (7.861346, 7.872984,7.953916), πράγμα που δεν κάνει.
# Όσο κι αν το αναζήτησα στο ιντερνετ, δε βρήκα λύση στο ερώτημα.
plt.boxplot(texts_results1[quint_index],whis=1.5)
plt.show()


outliers=[]
for i in texts_results1[quint_index]:
  if i<minimum or i>maximum:
   outliers.append(i)


texts_results1=texts_results1.loc[texts_results1[quint_index]<maximum]
texts_results1=texts_results1.loc[texts_results1[quint_index]>minimum]

print("outliers in", quint_index,":", outliers)

print("mean:\t", texts_results1[quint_index].mean())

print("median:\t", texts_results1[quint_index].median())

print("std:\t", texts_results1[quint_index].std())

hist=texts_results1[quint_index].hist(bins=10)
plt.show()

feature = texts_results1[quint_index]
res = feature.describe()
hist_1 = 20*feature/res.get('count') 

hist_2 = hist_1.hist(bins=10)
sns.kdeplot(hist_1)
plt.show()


skewness = skew(hist_1)
print("\nskewness:\t", skewness)

if skewness < 0:
  print("****left-skewed distribution (negatively skewed)****\n" )
elif skewness > 0:
  print("****right-skewed distribution (positively skewed)****\n" )

if skewness<0.5 and skewness>-0.5:
  print("****the data are fairly symmetrical****")
elif -1<skewness<-0.5 or 1>skewness>0.5:
  print("****the data are moderately skewed****")
else:
  print('***the data are highly skewed***')

"""Η PDF για τον ποσοτικό δείκτη Entropy δεν προσεγγίζει την κανονική κατανομή οπτικά, καθώς και πάλι παρατηρούμε μια ουρά προς τα αριστερά της κατανομής. Όσον αφορά το skewness, η μέτρηση σημείωσε μια σχετική ασυμμετρία."""

texts_results1=texts_results
quint_index='R1'
#print(sorted(texts_results1[quint_index]))
print('\t\t',quint_index,'\n','-------------------------------------')
q75, q25 = np.percentile(texts_results1[quint_index], [75 ,25]) 
print("q25 =", q25)
print("q75 =", q75)
iqr = q75 - q25
print("iqr =", iqr)

minimum = q25-1.5*iqr
print("'minimum'\t",minimum)
maximum = q25+1.5*iqr
print("'maximum'\t",maximum)

plt.boxplot(texts_results1[quint_index])
plt.show()

outliers=[]
for i in texts_results1[quint_index]:
  if i<minimum or i>maximum:
   outliers.append(i)


texts_results1=texts_results1.loc[texts_results1[quint_index]<maximum]
texts_results1=texts_results1.loc[texts_results1[quint_index]>minimum]

print("outliers in", quint_index,":", outliers)

print("mean:\t", texts_results1[quint_index].mean())

print("median:\t", texts_results1[quint_index].median())

print("std:\t", texts_results1[quint_index].std())

hist=texts_results1[quint_index].hist(bins=10)
plt.show()

feature = texts_results1[quint_index]
res = feature.describe()
hist_1 = 100*feature/res.get('count') 

hist_2 = hist_1.hist(bins=10)
sns.kdeplot(hist_1)
plt.show()


skewness = skew(hist_1)
print("\nskewness:\t", skewness)

if skewness < 0:
  print("****left-skewed distribution (negatively skewed)****\n" )
elif skewness > 0:
  print("****right-skewed distribution (positively skewed)****\n" )

if skewness<0.5 and skewness>-0.5:
  print("****the data are fairly symmetrical****")
elif -1<skewness<-0.5 or 1>skewness>0.5:
  print("****the data are moderately skewed****")
else:
  print('***the data are highly skewed***')

"""Η PDF για τον δείκτη δεν προσιδιάζει στην κανονική κατανομή, καθώς σχηματικά διαφέρει σημαντικά από την στερεοτυπική εικόνα μιας κανονικής κατανομής. Παρατηρούμε, ότι έχει ουρά προς τα αριστερά. Παρόλα αυτά, όσον αφορά το skewness δε χαρακτηρίζεται από έντονη ασυμμετρία."""

texts_results1=texts_results
quint_index='Average Tokens Length'
#print(sorted(texts_results1[quint_index]))
print('\t\t',quint_index,'\n','-------------------------------------')
q75, q25 = np.percentile(texts_results1[quint_index], [75 ,25]) 
print("q25 =", q25)
print("q75 =", q75)
iqr = q75 - q25
print("iqr =", iqr)

minimum = q25-1.5*iqr
print("'minimum'\t",minimum)
maximum = q25+1.5*iqr
print("'maximum'\t",maximum)

#το boxplot απεικονίζει την κατάσταση πριν την αφαίρεση των outliers
plt.boxplot(texts_results1[quint_index])
plt.show()


outliers=[]
for i in texts_results1[quint_index]:
  if i<minimum or i>maximum:
   outliers.append(i)
   

texts_results1=texts_results1.loc[texts_results1[quint_index]<maximum]
texts_results1=texts_results1.loc[texts_results1[quint_index]>minimum]

print("outliers in", quint_index,":", outliers)

print("mean:\t", texts_results1[quint_index].mean())

print("median:\t", texts_results1[quint_index].median())

print("std:\t", texts_results1[quint_index].std())

hist=texts_results1[quint_index].hist(bins=10)
plt.show()


feature = texts_results1[quint_index]
res = feature.describe()
hist_1 = 10*feature/res.get('count') 

hist_2 = hist_1.hist(bins=10)
sns.kdeplot(hist_1)
plt.show()


skewness = skew(hist_1)
print("\nskewness:\t", skewness)

if skewness < 0:
  print("****left-skewed distribution (negatively skewed)****\n" )
elif skewness > 0:
  print("****right-skewed distribution (positively skewed)****\n" )

if skewness<0.5 and skewness>-0.5:
  print("****the data are fairly symmetrical****")
elif -1<skewness<-0.5 or 1>skewness>0.5:
  print("****the data are moderately skewed****")
else:
  print('***the data are highly skewed***')

"""Η PDF για τον δείκτη Average Tokens Length προσεγγίζει οπτικά την κανονική κατανομή, καθώς διακρίνουμε λίγα παραλλαγμένη την στερεοτυπική καμπάνα της κανονικής κατανομής. Όσον αφορά το skewness, θα λέγαμε ότι την κατανομή την χαρακτηρίζει ελάχιστη ασυμμετρία. Όπως φαίνεται και από το αποτέλεσμα του κώδικα εύρεσης
του skewness η κατανομή έχει μια πολύ μικρή ουρά προς τα δεξιά.
"""

texts_results1=texts_results
quint_index='Λ (Lambda)'
#print(sorted(texts_results1[quint_index]))

print('\t\t',quint_index,'\n','-------------------------------------')
q75, q25 = np.percentile(texts_results1[quint_index], [75 ,25]) 
print("q25 =", q25)
print("q75 =", q75)
iqr = q75 - q25
print("iqr =", iqr)

minimum = q25-1.5*iqr
print("'minimum'\t",minimum)
maximum = q25+1.5*iqr
print("'maximum'\t",maximum)

plt.boxplot(texts_results1[quint_index])
plt.show()

outliers=[]
for i in texts_results1[quint_index]:
  if i<minimum or i>maximum:
   outliers.append(i)

   
texts_results1=texts_results1.loc[texts_results1[quint_index]<maximum]
texts_results1=texts_results1.loc[texts_results1[quint_index]>minimum]

print("outliers in", quint_index,":", outliers)

print("mean:\t", texts_results1[quint_index].mean())

print("median:\t", texts_results1[quint_index].median())

print("std:\t", texts_results1[quint_index].std())

hist=texts_results1[quint_index].hist(bins=10)
plt.show()

feature = texts_results1[quint_index]
res = feature.describe()
hist_1 = 30*feature/res.get('count') 

hist_2 = hist_1.hist(bins=10)
sns.kdeplot(hist_1)
plt.show()

skewness = skew(hist_1)
print("\nskewness:\t", skewness)

if skewness < 0:
  print("****left-skewed distribution (negatively skewed)****\n" )
elif skewness > 0:
  print("****right-skewed distribution (positively skewed)****\n" )

if skewness<0.5 and skewness>-0.5:
  print("****the data are fairly symmetrical****")
elif -1<skewness<-0.5 or 1>skewness>0.5:
  print("****the data are moderately skewed****")
else:
  print('***the data are highly skewed***')

"""Όσον αφορά τον ποσοτικό δείκτη Λ (Lambda), παρατηρούμε ότι η κατανομή χαρακτηρίζεται από σημαντική συμμετρία. Έχει μια ελάχιστη ουρά προς τα αριστερά. Θα μπορούσαμε να πούμε ότι προσεγγίζει την κανονική κατανομή, αν και στην περιοχή της μέσης τιμής βλέπουμε ότι σημειώνεται μια πτώση της καμπύλης, χαρακτηριστικό που δεν παρατηρείται στις κανονικές κατανομές."""